1.分布式版本控制系统

2.只能跟踪文本文件的改动;如果要真正使用版本控制系统，就要以纯文本方式编写文件

3.把一个文件放到Git仓库只需要两步
	1.用命令git add告诉Git，把文件添加到仓库(git add readme.txt)
	2.用命令git commit告诉Git，把文件提交到仓库(git commit -m "wrote a readme file" -m后面输入的是本次提交的说明)

4.commit可以一次提交很多文件，所以你可以多次add不同的文件

5.运行git status命令看看结果

6.用git diff这个命令,看看具体修改了什么内容

7.提交修改和提交新文件是一样的两步

8.每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit;一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失

9.用git log命令查看:历史记录(加上--pretty=oneline参数:输出简略信息)

10.用HEAD表示当前版本

11.使用git reset命令:回退版本(git reset --hard HEAD^)

12.Git在内部有个指向当前版本的HEAD指针

13.git reflog用来记录你的每一次命令

14.工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD
	
	用git add把文件添加进去，实际上就是把文件修改添加到暂存区
	用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支

15.Git跟踪并管理的是修改，而非文件
	用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

16.git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销
	1.readme.txt自修改后还没有被放到暂存区;撤销修改就回到和版本库一模一样的状态
	2.readme.txt已经添加到暂存区后，又作了修改，撤销修改就回到添加到暂存区后的状态
	让这个文件回到最近一次git commit或git add时的状态
	git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

	用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage）,重新放回工作区

17.	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git 	checkout -- file
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作

18.	手动删除一个文件：
	1.确实要删除：从版本库中删除该文件，那就用命令git rm test.txt删掉，并且git commit
	先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的

	把误删的文件恢复到最新版本
	git checkout -- test.txt
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

19.本地Git仓库和GitHub仓库之间的传输是通过SSH加密的

20.	git remote add origin git@github.com:michaelliao/learngit.git
	添加后，远程库的名字就是origin

	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程

	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

	git push origin master(把本地master分支的最新修改推送至GitHub)

	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容
	(add->commit->push)

	git clone git@github.com:michaelliao/gitskills.git
	使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https

21.你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上

22.	HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEA	D指向的就是当前分支
	
	每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长

	合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支

	创建dev分支，然后切换到dev分支
	git checkout -b dev

	git checkout命令加上-b参数表示创建并切换，相当于以下两条命令
		git branch dev
		git checkout dev

	用git branch命令查看当前分支

	切换回master分支
	git checkout master

	把dev分支的工作成果合并到master分支上

	git merge命令用于合并指定分支到当前分支

	删除dev分支(git branch -d dev)

	因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全

	最新版本：
	创建并切换到新的dev分支，可以使用(git switch -c dev)
	直接切换到已有的master分支，可以使用(git switch master)

	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>或者git switch <name>
	创建+切换分支：git checkout -b <name>或者git switch -c <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>

23.用带参数的git log也可以看到分支的合并情况
	git log --graph --pretty=oneline --abbrev-commit

	解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交

	用git log --graph命令可以看到分支合并图

24.	如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样		，从分支历史上就可以看出分支信息

	--no-ff方式的git merge : 表示禁用Fast forward
	本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去

25.基本原则
	master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活
	每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

26.每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除
	Git提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作(git stash)

	首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支

	用git stash list命令看看:工作现场
		用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
		用git stash pop，恢复的同时把stash内容也删了

	先用git stash list查看，然后恢复指定的stash
		git stash apply stash@{0}

	cherry-pick命令，让我们能复制一个特定的提交到当前分支
		git branch
		git cherry-pick 4c805e2

27.每添加一个新功能，最好新建一个feature分支
	git branch -d feature-vulcan
	如果要强行删除，需要使用大写的-D参数
		git branch -D feature-vulcan

	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除

28.当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
	要查看远程库的信息，用git remote

	用git remote -v显示更详细的信息
	显示抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址

	推送其他分支:git push origin dev

	哪些分支需要推送，哪些不需要呢
		master分支是主分支，因此要时刻与远程同步
		dev分支是开发分支，团队所有成员都需要在上面工作，也需要与远程同步

	要在dev分支上开发，就必须创建远程origin的dev分支到本地
		git checkout -b dev origin/dev

	从远程库clone时，默认情况下，只能看到本地的master分支

	解决冲突：先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送

	指定本地dev分支与远程origin/dev分支的链接:
	git branch --set-upstream-to=origin/dev dev

	多人协作的工作模式:
		用git push origin <branch-name>推送自己的修改
		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并
		如果合并有冲突，则解决冲突，并在本地提交
		没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功

	如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>

29.Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针;分支可以移动，标签不能移动
	tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起
	打标签步骤：
		1.切换到需要打标签的分支上
		2.git tag <name>:打一个新标签(git tag v1.0)
		3.用命令git tag查看所有标签

	对历史打标签：git tag v0.9 f52c633

	用git show <tagname>查看标签信息

	创建带有说明的标签，用-a指定标签名，-m指定说明文字(git tag -a v0.1 -m "version 0.1 released" 1094adb)

	标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签

	git tag -d v0.1

	创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除

	git push origin <tagname>:推送某个标签到远程
	一次性推送全部尚未推送到远程的本地标签:git push origin --tags

	删除远程标签：
		1.先从本地删除：git tag -d v1.0
		2.从远程删除：git push origin :refs/tags/v1.0

	删除已有的GitHub远程库
		git remote rm origin

	关联GitHub的远程库:
		git remote add github git@github.com:michaelliao/learngit.git
	关联码云的远程库:
		git remote add gitee git@gitee.com:liaoxuefeng/learngit.git

30.让Git显示颜色，会让命令输出看起来更醒目
	git config --global color.ui true


31.忽略特殊文件
	在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件

	如果你确实想添加该文件，可以用-f强制添加到Git
		git add -f App.class

	用git check-ignore命令检查:.gitignore是否写的有问题
		git check-ignore -v App.class

	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理

32.告诉Git，以后st就表示status
	git config --global alias.st status

	git config --global alias.unstage 'reset HEAD'

	配置一个git last，让其显示最后一次提交信息
		git config --global alias.last 'log -1'

	配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用

	每个仓库的Git配置文件都放在.git/config文件中
	别名就在[alias]后面，要删除别名，直接把对应的行删掉即可

	当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中

33.git服务器
	1.sudo apt-get install git
	
	2.创建一个git用户，用来运行git服务
		sudo adduser git

	3.创建证书登录
		收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个

	4.初始化Git仓库
		先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令
		sudo git init --bare sample.git

	5.Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git
		sudo chown -R git:git sample.git

	6.禁用shell登录
		出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成

		git:x:1001:1001:,,,:/home/git:/bin/bash
		改为：
		git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
		git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出

	7.克隆远程仓库
		git clone git@server:/srv/sample.git

		有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具

		要方便管理公钥，用Gitosis
		要像SVN那样变态地控制权限，用Gitolite

34.finish
	https://codernew.cn




